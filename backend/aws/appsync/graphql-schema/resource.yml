
  ASGraphQLSchemaUMT:
    Type: AWS::AppSync::GraphQLSchema
    Properties: 
      ApiId: !GetAtt ASGraphQLApiUMT.ApiId
      Definition: >
        type Court {
          hashKey: String!
          rangeKey: String!
          matchType: [String]!
          name: String!
          website: String!
          email: [String]
          phone: [String]
          information: String
          benefits: String
          schedule: String
          payCondition: String
          prices: String
          geoJson: [Float]
          partner: Boolean
          active: Boolean
          address: String
        }
        
        type CourtsList {
          items: [Court]
          nextToken: String
        }
        
        type Match {
          hashKey: String!
          rangeKey: String!
          geohash: String!
          matchId: String!
          adversaryName: String!
          adversaryPicture: String!
          createdAt: String!
          expireAt: String!
          matchStatus: String!
          matchFilter: String!
          genderFilter: String!
          ageMinFilter: Int!
          ageMaxFilter: Int!
        }
        
        type MatchesList {
          items: [Match]
          nextToken: String
        }
        
        type Message {
          hashKey: String!
          rangeKey: String!
          author: String!
          authorName: String!
          content: String!
        }
        
        type MessagesList {
          items: [Message]
          nextToken: String
        }
        
        type Mutation {
          addMatch(
            hashKey: String!,
            rangeKey: String!,
            geohash: String!,
            creatorName: String!,
            creatorPicture: String!,
            adversaryName: String!,
            adversaryPicture: String!,
            matchFilter: String!,
            genderFilter: String!,
            ageMinFilter: Int!,
            ageMaxFilter: Int!
          ): Match
          updateMatch(
            hashKey: String!,
            rangeKey: String!,
            matchId: String!,
            userStatus: String!
          ): Match
          updateUser(
            hashKey: String!,
            rangeKey: String!,
            genderFilter: String!,
            ageMinFilter: Int!,
            ageMaxFilter: Int!,
            matchFilter: String!
          ): User
          addMessage(
            hashKey: String!,
            author: String!,
            authorName: String!,
            content: String!
          ): Message
          addUser(
            latitude: Float!,
            longitude: Float!,
            rangeKey: String!,
            genderFilter: String!,
            ageMinFilter: Int!,
            ageMaxFilter: Int!,
            matchFilter: String!
          ): User
        }
        
        type Query {
          getCourts(hashKey: String!, matchType: String!, nextToken: String): CourtsList
          getMatches(hashKey: String!, nextToken: String): MatchesList
          getMessages(hashKey: String!, nextToken: String): MessagesList
          getUser(rangeKey: String!, nextToken: String): UsersList
          searchMatch(
            hashKey: String!,
            nextToken: String,
            birthdate: String,
            matchFilter: String,
            genderFilter: String,
            rangeKey: String,
            ageMinFilter: Int,
            ageMaxFilter: Int,
            gender: String
          ): UsersList
        }
        
        type Subscription {
          onAddMessage(hashKey: String!): Message
            @aws_subscribe(mutations: ["addMessage"])
          onUpdateMatch(rangeKey: String!): Match
            @aws_subscribe(mutations: ["updateMatch"])
        }
        







        type User {
          email: String!
          geohash: String!
          coords: String
          genderFilter: [String]
          ageMinFilter: Int
          ageMaxFilter: Int
          matchFilter: [String]
          positions: [String]
          skills: String
          foot: String
          weight: Int!
          height: Int!
        }
        
        type UserList {
          items: [User]
          nextToken: String
        }

        type Team {
          id: String!
          name: String!
          picture: String
          formation: String
          geohash: String!
          searchingPlayers: Boolean!
        }

        type TeamList {
          items: [Team]
          nextToken: String
        }

        type TeamMember {
          teamId: String!
          userEmail: String!
          position: String
          isCaptain: Boolean
          role: [String!]!
          status: String
          number: Int
          joinedOn: String
        }

        type TeamMemberList {
          items: [TeamMember]
          nextToken: String
        }

        type TeamChat {
          teamId: String!
          userEmail: String!
          sentOn: String!
          msg: String!
        }

        type TeamChatList {
          items: [TeamChat]
          nextToken: String
        }

        type Match {
          teamId1: String!
          teamId2: String!
          createdOn: String!
          allowedPatches: Int
          positions: [String]
          matchTypes: [String]
          expireOn: String!
          schedule: String
          status: String
          geohash: String!
          stadiumGeohash: String
          stadiumId: String
          courtId: Int
        }

        type MatchList {
          items: [Match]
          nextToken: String
        }

        type MatchPatch {
          teamId1: String!
          teamId2: String!
          userEmail: String!
          status: String
          joinedOn: String!
        }

        type MatchPatchList {
          items: [MatchPatch]
          nextToken: String
        }

        type MatchChat {
          teamId1: String!
          teamId2: String!
          userEmail: String!
          sentOn: String!
          msg: String!
        }

        type MatchChatList {
          items: [MatchChat]
          nextToken: String
        }

        type Stadium {
          geohash: String!
          id: String!
          name: String!
          matchTypes: [String!]!
          coords: String!
          address: String
        }

        type StadiumList {
          items: [Stadium]
          nextToken: String
        }

        type Court {
          stadiumId: String!
          stadiumGeohash: String!
          id: String!
          matchTypes: [String!]!
          material: String
        }

        type CourtList {
          items: [Court]
          nextToken: String
        }

        type Mutation {
          addUser(
            latitude: Float!,
            longitude: Float!,
            email: String!,
            genderFilter: [String!]!,
            ageMinFilter: Int!,
            ageMaxFilter: Int!,
            matchFilter: [String!]!,
            positions: [String],
            skills: String,
            foot: String,
            weight: Int!,
            height: Int!
          ): User
          addTeam(
            name: String!,
            geohash: String!,
            searchingPlayers: Boolean!
          ): Team
          addTeamMember(
            teamId: String!,
            userEmail: String!,
            position: String,
            role: [String],
            status: String!,
            number: Int!
          ): TeamMember
          addTeamChat(
            teamId: String!,
            userEmail: String!,
            msg: String!
          ): TeamChat
          addMatch(
            teamId1: String!,
            teamId2: String!,
            allowedPatches: Int,
            matchTypes: String!,
            schedule: String!,
            geohash: String!,
            stadiumGeohash: String,
            stadiumId: String,
            courtId: Int
          ): Match
          addMatchPatch(
            teamId1: String!,
            teamId2: String!,
            userEmail: String!,
            status: String
          ): MatchPatch
          addMatchChat(
            teamId1: String!,
            teamId2: String!,
            userEmail: String!,
            msg: String!
          ): MatchChat
          addStadium(
            latitude: Float!,
            longitude: Float!,
            name: String!,
            matchTypes: [String!]!,
            address: String
          ): Stadium
          addCourt(
            stadiumId: String!,
            stadiumGeohash: String!,
            matchTypes: [String!]!,
            material: String
          ): Court
        }
        
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }
